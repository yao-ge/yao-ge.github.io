<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google-Code-Style-C++</title>
    <url>/2021/12/25/Google-Code-Style-C/C/</url>
    <content><![CDATA[<blockquote>
<p>some personal notes when reading google code style</p>
</blockquote>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><h2 id="self-contained头文件"><a href="#self-contained头文件" class="headerlink" title="self-contained头文件"></a>self-contained头文件</h2><blockquote>
<p>头文件应该能够自给自足,self-contained,可以作为第一个头文件被引入</p>
</blockquote>
<p>如果.h文件声明了一个模板或者内联函数,同时也在该文件加以定义<br>例外:如果某函数模板为所有相关模板函数显式实例化,或者本身是某个类的一个私有成员,那么就只能定义在实例化该模板的.cc文件</p>
<span id="more"></span>

<h2 id="define保护"><a href="#define保护" class="headerlink" title="define保护"></a>define保护</h2><blockquote>
<p>所有头文件都应该使用#define来防止头文件被多重包含,格式:&lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_</p>
</blockquote>
<p>为保证唯一性,头文件的命名应该基于所在项目源代码树的全路径</p>
<h2 id="前置声明"><a href="#前置声明" class="headerlink" title="前置声明"></a>前置声明</h2><blockquote>
<p>尽可能地避免使用前置声明,使用#include 包含需要的头文件即可</p>
</blockquote>
<p>前置声明(forward declaraion)是类、函数和模板的纯粹声明,没有定义</p>
<ul>
<li>优点<ul>
<li>节省编译时间,#include会使代码因为头文件中无关的改动重新编译多次</li>
</ul>
</li>
<li>缺点<ul>
<li>隐藏了依赖关系,头文件改动时,用户的代码会跳过必要的重新编译过程;</li>
<li>可能会被库的后续更改破坏</li>
<li>来自命名空间std::的symbol时,行为为定义</li>
<li>很难判断什么时候该用前置声明,什么时候用#include</li>
</ul>
</li>
</ul>
<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><blockquote>
<p>只有当函数只有10行甚至更少时才将其定义为内联函数</p>
</blockquote>
<p>当函数被声明为内联函数之后,编译器会将其内联展开,而不是按照通常的函数调用机制进行调用</p>
<ul>
<li>经验准则<ul>
<li>谨慎对待析构函数,析构函数往往比其表面看起来要更长,因为含有隐含的成员和基类析构函数被调用</li>
<li>内联包含循环或者switch语句的函数往往得不偿失</li>
<li>有些函数即使声明为内联也不一定会被编译器内联,比如虚函数和递归函数</li>
</ul>
</li>
</ul>
<h2 id="include的路径和顺序"><a href="#include的路径和顺序" class="headerlink" title="#include的路径和顺序"></a>#include的路径和顺序</h2><blockquote>
<p>使用标准头文件包含顺序可增强可读性,避免隐藏依赖</p>
</blockquote>
<p>依赖的符号(symbol)被哪些头文件定义,就应该包含这些头文件,前置声明情况除外<br>避免多重包含</p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><blockquote>
<p>鼓励在.cc文件内使用匿名空间或static声明,禁止使用using指示,精致实用内联名空间</p>
</blockquote>
<p>命名空间将全局作用域细分为独立的,具名的作用域,可有效防止全局作用域的命名冲突</p>
<ul>
<li>优点<ul>
<li>防止冲突(内联名空间主要用来保持跨版本的ABI兼容性</li>
</ul>
</li>
<li>缺点<ul>
<li>命名空间具有迷惑性,使得区分两个相同命名所指代的定义更加困难</li>
<li>完整的命名空间导致代码的冗长</li>
<li>在头文件中使用匿名空间将违背C++的唯一定义原则</li>
</ul>
</li>
<li>结论<ul>
<li>遵守命名空间命名中的规则</li>
<li>在命名空间的最后注释出命名空间的名字</li>
<li>不要在命名空间std内声明任何东西,包括标准库的类前置声明</li>
<li>不应该使用using指示引入整个命名空间的标识符号</li>
<li>不要在头文件中使用命名空间别名,除非显式标记内部命名空间使用</li>
<li>禁止使用内联名空间</li>
</ul>
</li>
</ul>
<h2 id="匿名命名空间和静态变量"><a href="#匿名命名空间和静态变量" class="headerlink" title="匿名命名空间和静态变量"></a>匿名命名空间和静态变量</h2><blockquote>
<p>在.cc文件中定义一个不需要被外部引用的变量时,可以将它们放在匿名命名空间或声明为static,但是不要在.h文件中这么做</p>
</blockquote>
<p>所有属于匿名命名空间的声明都具有内部链接性,函数和变量可以经由声明为static拥有内部链接性,意味着此文件中声明的标识都不能在另外一个文件中被访问.即使两个文件生命了完全一样名字的标识符,它们所指向的实体实际上时完全不同的</p>
<ul>
<li>结论<ul>
<li>推荐鼓励在.cc中对于不需要在其他地方引用的标识符使用内部链接性声明,但是不要在.h中使用</li>
<li>匿名命名空间的声明和具名的格式相同,在最后注释上namespace</li>
</ul>
</li>
</ul>
<h2 id="非成员函数、静态成员函数和全局函数"><a href="#非成员函数、静态成员函数和全局函数" class="headerlink" title="非成员函数、静态成员函数和全局函数"></a>非成员函数、静态成员函数和全局函数</h2><blockquote>
<p>使用静态成员函数或命名空间内的非成员函数,尽量不要用裸的全局函数<br>  将一系列函数直接置于命名空间中,不要使用类的静态方法模拟出命名空间的效果,类的静态方法应当和类的实例或静态数据紧密相关</p>
</blockquote>
<p>优点: 将非成员函数放在命名空间内可避免污染全局作用域</p>
<p>缺点: 将非成员函数和静态成员函数作为新类的成员或许更有意义,当它们需要访问外部资源或具有重要的依赖关系时更是如此</p>
<p>结论: 为了封装若干不共享任何静态数据的静态成员函数而创建类,不如使用命名空间</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><blockquote>
<p>将函数变量尽可能置于最小作用域内,并在变量声明时进行初始化</p>
</blockquote>
<p>C++允许在函数的任何位置声明变量,建议离第一次使用越近越好,有一个例外,如果变量是一个对象,每次进入作用域都要调用构造函数,退出作用域都要调用析构函数,这会导致效率降低</p>
<h2 id="静态和全局变量"><a href="#静态和全局变量" class="headerlink" title="静态和全局变量"></a>静态和全局变量</h2><blockquote>
<p>禁止定义静态存储周期非POD变量,禁止使用含有副作用的函数初始化POD全局变量,因为多编译单元中的静态变量执行时的构造和析构顺序时不明确的,这将导致代码的不可移植</p>
</blockquote>
<blockquote>
<p>原生数据类型(POD:Plain Old Data):即int,char和float,以及POD类型的指针,数组和结构体</p>
</blockquote>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="构造函数的职责"><a href="#构造函数的职责" class="headerlink" title="构造函数的职责"></a>构造函数的职责</h2><p>可以在构造函数中进行各种初始化操作,不要在构造函数中调用虚函数,也不要在无法报出错误时进行可能失败的初始化,简单来说,确保在构造函数的行为是确定的</p>
<ul>
<li><p>优点</p>
<ul>
<li>不需要考虑类是否被初始化</li>
<li>经过构造函数初始化后的对象可以为const类型</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>构造函数中调用了自身的虚函数,不会重定向到子类的虚函数实现</li>
<li>构造函数很难上报错误</li>
<li>执行失败会得到一个初始化失败的对象,必须使用bool IsValid()机制检查</li>
<li>构造函数的地址无法获取,由构造函数完成的工作是无法以简单的方式交给其他线程</li>
</ul>
</li>
<li><p>结论</p>
<ul>
<li>构造函数不允许调用虚函数,或者尝试报告一个非致命错误</li>
<li>可以考虑使用明确的Init()方法或者使用工厂模式</li>
</ul>
</li>
</ul>
<h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>不定义隐式类型转换,对于转换运算符和单参数构造函数,使用explicit关键字<br>explicit关键字可以用于构造函数或类型转换运算符,以保证只有当目的类型在调用点被显式写明时才能进行类型转换<br>在类型定义中,类型转换运算符和单参数构造函数都应当用explicit进行标记<br>例外:拷贝和移动构造函数不应当被标记为explicit,因为它们不执行类型转换</p>
<h2 id="可拷贝类型和可移动类型"><a href="#可拷贝类型和可移动类型" class="headerlink" title="可拷贝类型和可移动类型"></a>可拷贝类型和可移动类型</h2><p>可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一 对象的值, 同时不改变源对象的值.</p>
<h2 id="结构体-amp-类"><a href="#结构体-amp-类" class="headerlink" title="结构体&amp;类"></a>结构体&amp;类</h2><p>仅当只有数据成员时使用struct, 其它一概使用class</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>使用组合比使用继承更合理</p>
</blockquote>
<p>子类继承基类时会包含所有数据及操作的定义<br>使用继承的两种场合:</p>
<ul>
<li>子类继承父类的实现代码</li>
<li>子类继承父类的方法名称</li>
</ul>
<p>尽量在”是”的关系下使用继承</p>
<h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><blockquote>
<p>只在以下情况才推荐使用多重继承:最多只有一个基类是非抽象类</p>
</blockquote>
<p>只有当所有父类除第一个外都是纯接口时,才允许使用多重继承</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>接口是指满足特定条件的类,以Interface为后缀</p>
</blockquote>
<p>当一个类满足以下要求时, 称之为纯接口:</p>
<ul>
<li>只有纯虚函数(“=0”)和静态函数(除了下文提到的析构函数)</li>
<li>没有非静态数据成员</li>
<li>没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为protected</li>
<li>如果它是一个子类, 也只能从满足上述条件并以 Interface 为后缀的类继承</li>
</ul>
<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><blockquote>
<p>除少数特定环境外,不要重载运算符,也不要创建用户定义字面量</p>
</blockquote>
<h2 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h2><blockquote>
<p>将所有数据成员声明为private,除非是static const类型成员</p>
</blockquote>
<h2 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h2><blockquote>
<p>将相似的声明放在仪器,将public部分放在最前</p>
</blockquote>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h2><blockquote>
<p>输入参数在前,输出参数在后</p>
</blockquote>
<h2 id="编写简短函数"><a href="#编写简短函数" class="headerlink" title="编写简短函数"></a>编写简短函数</h2><blockquote>
<p>倾向于编写简短、凝练的函数,函数超过40行,可以考虑进行分割</p>
</blockquote>
<h2 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h2><blockquote>
<p>所有按引用传递的参数必须加上const</p>
</blockquote>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><blockquote>
<p>如果打算重载一个函数,可以改为在函数名里加上参数信息</p>
</blockquote>
<h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>》 只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致</p>
<h2 id="函数返回类型后置语法"><a href="#函数返回类型后置语法" class="headerlink" title="函数返回类型后置语法"></a>函数返回类型后置语法</h2><p>》 只有在常规写法（返回类型前置）不便于书写或不便于阅读时使用返回类型后置语法</p>
<p>C++现在允许两种不同的函数声明方式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> x)</span> -&gt; <span class="keyword">int</span></span>;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>后置返回类型是显式地指定Lambda表达式的返回值的唯一方式</li>
<li>有时在已经出现了的函数参数列表之后指定返回类型，能够让书写更简单，也更易读，尤其是在返回类型依赖于模板参数时</li>
</ul>
<p>例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">U</span>&gt;</span> <span class="keyword">decltype</span>(declval&lt;T&amp;&gt;() + declval&lt;U&amp;&gt;()) <span class="built_in">add</span>(T t, U u);</span><br></pre></td></tr></table></figure>

<h2 id="类型命名"><a href="#类型命名" class="headerlink" title="类型命名"></a>类型命名</h2><p>类型名称的每个单词首字母均大写,不包含下划线<br>所有类型命名–类,结构体,类型定义,枚举,类型模板参数–均使用相同约定</p>
<h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>变量(包括函数参数)和数据成员名全部小写,单词之间用下划线连接,类的成员变量以下划线结尾,结构体不用</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>README</title>
    <url>/2021/12/24/README/MarkDown/</url>
    <content><![CDATA[<blockquote>
<p>record the steps of building personal blog using hexo on mac </p>
</blockquote>
<h1 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h1><h2 id="dependecies-list"><a href="#dependecies-list" class="headerlink" title="dependecies-list"></a>dependecies-list</h2><ul>
<li><input checked="" disabled="" type="checkbox"> git</li>
<li><input checked="" disabled="" type="checkbox"> node.js</li>
<li><input checked="" disabled="" type="checkbox"> npm</li>
<li><input checked="" disabled="" type="checkbox"> hexo</li>
</ul>
<span id="more"></span>

<h2 id="hexo-common-use"><a href="#hexo-common-use" class="headerlink" title="hexo-common-use"></a>hexo-common-use</h2><ul>
<li>hexo init [destination] 对指定目录初始化,创建hexo目录,destination须为空目录,为指定则为当前目录</li>
<li>hexo new [docname] 新建文章</li>
<li>hexo new page [pagename] 新建页面</li>
</ul>
<h1 id="building"><a href="#building" class="headerlink" title="building"></a>building</h1><h2 id="build-hexo"><a href="#build-hexo" class="headerlink" title="build-hexo"></a>build-hexo</h2><ul>
<li>hexo初始化,这里建立blog目录: hexo init blog</li>
<li>theme目录放置主题,可在github上下载</li>
<li>新建文章:hexo new HelloWorld</li>
<li>生成静态文件:hexo g</li>
<li>生成静态文件后部署:hexo deploy</li>
<li>启动本地服务器:hexo server, 默认情况下为<a href="http://localhost:4000/">http://localhost:4000</a></li>
<li>使用新主题时清除缓存文件:hexo clean</li>
</ul>
<h2 id="deploy-to-github-pages"><a href="#deploy-to-github-pages" class="headerlink" title="deploy-to-github-pages"></a>deploy-to-github-pages</h2><ul>
<li>设置生成github pages</li>
<li>github常规配置:ssh等</li>
<li>修改-config.yml,加入github.io信息</li>
<li>安装plug: npm install hexo-deployer-git –save</li>
<li>生成静态文件:hexo d -g</li>
</ul>
<h2 id="configuration-optimization"><a href="#configuration-optimization" class="headerlink" title="configuration-optimization"></a>configuration-optimization</h2><ul>
<li>根据配置说明网页<a href="https://hexo.io/zh-cn/docs/configuration%E4%BF%AE%E6%94%B9/-config.yml%E6%96%87%E4%BB%B6">https://hexo.io/zh-cn/docs/configuration修改\-config.yml文件</a></li>
<li>字数统计: npm install hexo-symbols-count-time –save<blockquote>
<p>具体配置选项可参考: _config.yml, theme/next/\config.yml</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>multipass research</title>
    <url>/2022/01/11/multipass-research/Ubuntu/</url>
    <content><![CDATA[<h1 id="multipass"><a href="#multipass" class="headerlink" title="multipass"></a>multipass</h1><p>this is a blog about multipass</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>virtual</tag>
      </tags>
  </entry>
  <entry>
    <title>使用multipass + squid代理访问公司内网</title>
    <url>/2022/01/23/squid/network/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>在办公设备上,常规环境是在宿主机内直接搭建openvpn,通过openvpn访问公司内网</p>
<p>为更好的保护个人隐私,意欲在一个隔离的环境通过openvpn访问公司内网,并且在访问google、baidu等网站(🦑)时不被公司vpn记录行为</p>
<p>需要摸索出一套环境,宿主机+虚拟机(openvpn),虚拟机中能够直接通过公司vpn访问公司内网,但是宿主机不能访问公司内网,通过设置代理地址,也能使得宿主机访问公司内网,这样就能做到可控的在openvpn下暴露指定的行为(dddd)</p>
<span id="more"></span>

<h1 id="设备及环境"><a href="#设备及环境" class="headerlink" title="设备及环境"></a>设备及环境</h1><p>公司办公设备mac<br>访问公司内网openvpn<br>虚拟机管理器multipass</p>
<blockquote>
<p>为什么选择multipass,因为docker太耗电</p>
</blockquote>
<p>虚拟机内正向代理squid</p>
<blockquote>
<p>为什么选择squid,因为nginx太麻烦</p>
</blockquote>
<p>浏览器firefox</p>
<blockquote>
<p>为什么选择firefox,因为可以设置代理地址</p>
</blockquote>
<blockquote>
<p>这样就可以通过firefox+multipass+squid+openvpn访问公司内网,但是其他浏览器比如Safari就不会经过公司内网(很好),并且开发工作直接在虚机中进行即可</p>
</blockquote>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="multipass"><a href="#multipass" class="headerlink" title="multipass"></a>multipass</h2><p>multipass是由Ubuntu运营公司Canonical推出的开源项目,用来创建和管理虚拟机,可以部署在Linux、macOS、Windows操作系统上,目前看起来虚拟机只支持ubuntu,不支持centos</p>
<h3 id="安装步骤-https-multipass-run"><a href="#安装步骤-https-multipass-run" class="headerlink" title="安装步骤(https://multipass.run)"></a>安装步骤(<a href="https://multipass.run/">https://multipass.run</a>)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install multipass</span><br></pre></td></tr></table></figure>

<h3 id="查找当前可支持的镜像"><a href="#查找当前可支持的镜像" class="headerlink" title="查找当前可支持的镜像"></a>查找当前可支持的镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multipass find</span><br></pre></td></tr></table></figure>
<p><img src="/images/multipass_find.png" alt="multipass find"></p>
<h3 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h3><blockquote>
<p>multipass引入了实例(instance)来对等docker中容器(container)的概念</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multipass launch -n workspace -c 4 -d 30G -m 4G 21.10 </span><br><span class="line"><span class="comment"># launch 创建和启动一个ubuntu实例</span></span><br><span class="line"><span class="comment"># -n 指定实例名字</span></span><br><span class="line"><span class="comment"># -c 指定cpu个数</span></span><br><span class="line"><span class="comment"># -d 指定磁盘大小</span></span><br><span class="line"><span class="comment"># -m 指定内存大小</span></span><br><span class="line"><span class="comment"># 21.10 指定Ubuntu版本</span></span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multipass ls</span><br></pre></td></tr></table></figure>

<h3 id="进入实例并配置相关环境"><a href="#进入实例并配置相关环境" class="headerlink" title="进入实例并配置相关环境"></a>进入实例并配置相关环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multipass sh workspace</span><br></pre></td></tr></table></figure>

<p>配置ip转发：在<code>/etc/sysctl.conf</code>中将<code>net.ipv4.ip_forward</code>设置为<code>1</code>并取消注释，执行<code>sysctl -p</code>下注配置</p>
<h2 id="squid"><a href="#squid" class="headerlink" title="squid"></a>squid</h2><blockquote>
<p>在ubuntu虚机中安装squid来实现正向代理</p>
</blockquote>
<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install squid -y</span><br></pre></td></tr></table></figure>

<p>修改squid配置：在<code>/etc/squid/squid.conf</code>将<code>http_access deny all</code>修改为<code>http_access allow all</code><br>然后重启squid： <code>systemctl restart squid</code></p>
<h2 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h2><p>firefox中配置http和https代理，代理地址可通过<code>multpass ls</code>查看到，一般为192.168.64.*，端口squid默认为<code>3128</code></p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>squid</tag>
        <tag>multipass</tag>
        <tag>virtual machine</tag>
      </tags>
  </entry>
  <entry>
    <title>存储类说明符(Storage class specifiers)</title>
    <url>/2022/01/05/%E5%AD%98%E5%82%A8%E7%B1%BB%E8%AF%B4%E6%98%8E%E7%AC%A6/C/</url>
    <content><![CDATA[<h1 id="什么是存储类说明符"><a href="#什么是存储类说明符" class="headerlink" title="什么是存储类说明符"></a>什么是存储类说明符</h1><p>存储类说明符是一个名字的声明语法的声明说明符序列的一部分</p>
<p>它与名字的作用域一同控制名字的两个独立性质:存储期和链接</p>
<ul>
<li>auto: 只能搭配声明于块作用域或函数形参列表中的对象,指示自动存储期</li>
<li>register: 只能搭配声明于块作用域或函数形参列表中的对象,指示自动存储期,提示优化器将此变量的值存储于CPU寄存器,已被C++11弃用</li>
<li>static: 只能搭配函数形参列表外的对象声明、块作用域外的函数声明及匿名联合体声明.当用于声明类成员时,它会声明一个静态成员.当用于声明对象时,它指定静态存储期,除非与thread_local协同出现.</li>
<li>extern</li>
<li>thread_local</li>
<li>mutable</li>
</ul>
<blockquote>
<p>声明中只可以出现一个存储类说明符,但thread_local可以与static或extern结合</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>vim configure</title>
    <url>/2021/12/29/vim-configure/vim/</url>
    <content><![CDATA[<h2 id="env-install"><a href="#env-install" class="headerlink" title="env install"></a>env install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#apt-get是针对ubuntu平台的安装，mac安装可将apt-get更改为brew</span></span><br><span class="line">apt-get update -y </span><br><span class="line">apt-get upgrade -y</span><br><span class="line">apt-get install build-essential cmake vim-nox python3-dev clang libclang-dev clang-tidy clang-format -y</span><br><span class="line">apt-get install mono-complete nodejs default-jdk npm gnutls-bin xdg-utils curl -y</span><br><span class="line">apt-get install golang git -y</span><br><span class="line">apt-get remove</span><br><span class="line">apt-get autoremove</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#npm i -g install instant-markdown-d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	mkdir -p ~/.vim/bundle</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/<span class="built_in">autoload</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	mkdir -p ~/.vim/<span class="built_in">autoload</span></span><br><span class="line">	<span class="comment">#wget https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim ~/.root/autoload/</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># get bundle</span></span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line">git config --global http.postBuffer 1048576000</span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/Vundle.vim ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/nerdtree ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/nerdtree-git-plugin ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --recursive https://github.com/Xuyuanp/nerdtree-git-plugin.git ~/.vim/bundle/nerdtree-git-plugin</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/vim-devicons ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --recursive https://github.com/ryanoasis/vim-devicons.git ~/.vim/bundle/vim-devicons</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/syntastic ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --depth=1 https://github.com/vim-syntastic/syntastic.git ~/.vim/bundle/syntastic</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/vim-airline ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --depth=1 https://github.com/vim-airline/vim-airline.git ~/.vim/bundle/vim-airline</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/vim-colors-solarized ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --recursive https://github.com/altercation/vim-colors-solarized.git ~/.vim/bundle/vim-colors-solarized</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.vim/bundle/YouCompleteMe ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	git <span class="built_in">clone</span> --recursive https://github.com/ycm-core/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe</span><br><span class="line">	go env -w GO111MODULE=on</span><br><span class="line">	go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">	<span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe/ &amp;&amp; python3 ./install.py --clangd-completer</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<h2 id="vimrc-configure"><a href="#vimrc-configure" class="headerlink" title="vimrc configure"></a>vimrc configure</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">runtime! debian.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">filetype</span> off</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Plugin</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="string">&quot;&quot;</span> install Vundle</span><br><span class="line">Plugin <span class="string">&#x27;gmarik/Vundle.vim&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;ryanoasis/vim-devicons&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;vim-syntastic/syntastic&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;altercation/vim-colors-solarized&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;majutsushi/tagbar&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;valloric/youcompleteme&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;zivyangll/git-blame.vim&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;haya14busa/incsearch.vim&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;rhysd/vim-clang-format&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;instant-markdown/vim-instant-markdown&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Plugin end</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()</span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Plugin config</span></span><br><span class="line"><span class="string">&quot;&quot;</span> Nerd tree</span><br><span class="line"><span class="keyword">autocmd</span> vimenter * NERDTreeFind</span><br><span class="line"><span class="keyword">wincmd</span> <span class="keyword">w</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * <span class="keyword">wincmd</span> <span class="keyword">w</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowExpandable</span>=<span class="string">&#x27;►&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowCollapsible</span>=<span class="string">&#x27;▼&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeWinPos</span>=<span class="string">&#x27;left&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeWinSize</span>=<span class="number">40</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeShowLineNumbers</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * <span class="keyword">if</span> !argc()|NERDTree|<span class="keyword">endif</span></span><br><span class="line"><span class="keyword">autocmd</span> bufenter * <span class="keyword">if</span> (<span class="built_in">winnr</span>(<span class="string">&quot;$&quot;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">&quot;b:NERDTree&quot;</span>) &amp;&amp; <span class="variable">b:NERDTree</span>.isTabTree()) | q | <span class="keyword">endif</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">nnoremap</span> <span class="symbol">&lt;F10&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeGitStatusIndicatorMapCustom</span>=&#123;</span><br><span class="line">                \ <span class="string">&#x27;Modified&#x27;</span>  :<span class="string">&#x27;✹&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Staged&#x27;</span>    :<span class="string">&#x27;✚&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Untracked&#x27;</span> :<span class="string">&#x27;✭&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Renamed&#x27;</span>   :<span class="string">&#x27;➜&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Unmerged&#x27;</span>  :<span class="string">&#x27;═&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Deleted&#x27;</span>   :<span class="string">&#x27;✖&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Dirty&#x27;</span>     :<span class="string">&#x27;✗&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Ignored&#x27;</span>   :<span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Clean&#x27;</span>     :<span class="string">&#x27;✔︎&#x27;</span>,</span><br><span class="line">                \ <span class="string">&#x27;Unknown&#x27;</span>   :<span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">                \ &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Check if NERDTree is open or active</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">IsNERDTreeOpen</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exists</span>(<span class="string">&quot;t:NERDTreeBufName&quot;</span>) &amp;&amp; (<span class="built_in">bufwinnr</span>(<span class="variable">t:NERDTreeBufName</span>) != -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="comment">&quot; Call NERDTreeFind if NERDTree is active, current window contains a modifiable</span></span><br><span class="line"><span class="comment">&quot; file, and we&#x27;re not in vimdiff</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">SyncTree</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> &amp;modifiable &amp;&amp; IsNERDTreeOpen() &amp;&amp; <span class="built_in">strlen</span>(<span class="built_in">expand</span>(<span class="string">&#x27;%&#x27;</span>)) &gt; <span class="number">0</span> &amp;&amp; !&amp;diff</span><br><span class="line">    NERDTreeFind</span><br><span class="line">    <span class="keyword">wincmd</span> <span class="keyword">p</span></span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="comment">&quot; Highlight currently open buffer in NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> BufEnter * <span class="keyword">call</span> SyncTree()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">ToggleNerdTree</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">set</span> eventignore=BufEnter</span><br><span class="line">  NERDTreeToggle</span><br><span class="line">  <span class="keyword">set</span> eventignore=</span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">nmap</span> <span class="symbol">&lt;C-n&gt;</span> :<span class="keyword">call</span> ToggleNerdTree()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F10&gt;</span> :<span class="keyword">call</span> ToggleNerdTree()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> syntastic check</span><br><span class="line"><span class="keyword">execute</span> pathogen#infect()</span><br><span class="line"><span class="keyword">set</span> statusline+=%#warningmsg#</span><br><span class="line"><span class="keyword">set</span> statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line"><span class="keyword">set</span> statusline+=%&#123;FugitiveStatusline()&#125;</span><br><span class="line"><span class="keyword">set</span> statusline+=%*</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">vim</span> airline</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#enabled=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_always_populate_loc_list</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_auto_loc_list</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_open</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_wq</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">vim</span>-colors-solarized</span><br><span class="line"><span class="keyword">syntax</span> enable                   <span class="comment">&quot; Enable syntax highlighting</span></span><br><span class="line"><span class="keyword">colorscheme</span> solarized           <span class="comment">&quot; Change color scheme</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">colorscheme</span> industry          <span class="comment">&quot; Change color scheme</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:solarized_termcolors</span>=<span class="number">256</span></span><br><span class="line"><span class="keyword">call</span> togglebg#map(<span class="string">&quot;&lt;F5&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">set</span> background=dark             <span class="comment">&quot; Use colors that suit a dark background</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> tagbar</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_ctags_bin</span>=<span class="string">&#x27;/usr/bin/ctags&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_sort</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_width</span>=<span class="number">40</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F9&gt;</span> :TagbarToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> youcompleteme</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span>=<span class="string">&#x27;~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_confirm_extra_conf</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_auto_trigger</span>=<span class="number">1</span></span><br><span class="line"><span class="comment">&quot;let g:ycm_confirm_extra_conf=&#x27;~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py&#x27;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>yfw <span class="symbol">&lt;Plug&gt;</span>(YCMFindSymbolInWorkspace)</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>yfd <span class="symbol">&lt;Plug&gt;</span>(YCMFindSymbolInDocument)</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinition<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jl :YcmCompleter GoToDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jf :YcmCompleter GoToDefinition<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jg :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_invoke_completion</span>=<span class="string">&#x27;&lt;c-space&gt;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">set</span> completeopt=<span class="keyword">menu</span>,menuone</span><br><span class="line"><span class="keyword">set</span> completeopt=<span class="keyword">menu</span></span><br><span class="line"><span class="keyword">set</span> completeopt-=preview</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_add_preview_to_completeopt</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_autoclose_preview_window_after_insertion</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_autoclose_preview_window_after_completion</span>=<span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> CursorMovedI * <span class="keyword">if</span> <span class="built_in">pumvisible</span>() == <span class="number">0</span>|<span class="keyword">pclose</span>|<span class="keyword">endif</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> InsertLeave * <span class="keyword">if</span> <span class="built_in">pumvisible</span>() == <span class="number">0</span>|<span class="keyword">pclose</span>|<span class="keyword">endif</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_filetype_whitelist</span>=&#123;</span><br><span class="line">            \ <span class="string">&quot;c&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;cc&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;cpp&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;h&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;hpp&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;objc&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;sh&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;zsh&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ <span class="string">&quot;zimbu&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            \ &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_semantic_triggers</span> =  &#123;</span><br><span class="line">            \ <span class="string">&#x27;c,cpp,python,java,go,erlang,perl&#x27;</span>: [<span class="string">&#x27;re!\w&#123;2&#125;&#x27;</span>],</span><br><span class="line">            \ <span class="string">&#x27;cs,lua,javascript&#x27;</span>: [<span class="string">&#x27;re!\w&#123;2&#125;&#x27;</span>],</span><br><span class="line">            \ &#125;</span><br><span class="line"><span class="string">&quot;&quot;</span> git blame</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>\ :<span class="symbol">&lt;C-u&gt;</span><span class="keyword">call</span> gitblame#echo()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> clang format</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> FileType <span class="keyword">c</span> ClangFormatAutoEnable</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> FileType h ClangFormatAutoEnable</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> FileType <span class="keyword">cu</span> ClangFormatAutoEnable</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> FileType cpp ClangFormatAutoEnable</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">autocmd</span> FileType hpp ClangFormatAutoEnable</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:clang_format</span>#command = <span class="string">&#x27;clang-format&#x27;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;F4&gt;</span> :ClangFormat<span class="symbol">&lt;cr&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:clang_format</span>#detect_style_file = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:clang_format</span>#style_options = &#123;</span><br><span class="line">            \ <span class="string">&quot;BasedOnStyle&quot;</span> : <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">            \ <span class="string">&quot;ColumnLimit&quot;</span> : <span class="number">110</span>,</span><br><span class="line">            \ <span class="string">&quot;IndentWidth&quot;</span> : <span class="number">4</span></span><br><span class="line">            \&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> instant markdown</span><br><span class="line"><span class="comment">&quot;Uncomment to override defaults:</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_slow = 1</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_autostart = 0</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_open_to_the_world = 1</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_allow_unsafe_content = 1</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_allow_external_content = 0</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_mathjax = 1</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_mermaid = 1</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_logfile = &#x27;/tmp/instant_markdown.log&#x27;</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_autoscroll = 0</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_port = 8888</span></span><br><span class="line"><span class="comment">&quot;let g:instant_markdown_python = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; common set up</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                      <span class="comment">&quot; Show line numbers</span></span><br><span class="line"><span class="keyword">set</span> showmatch                   <span class="comment">&quot; Highlight matching brace</span></span><br><span class="line"><span class="keyword">set</span> visualbell                  <span class="comment">&quot; Use visual bell (no beeping)</span></span><br><span class="line"><span class="keyword">set</span> hlsearch                    <span class="comment">&quot; Highlight all search results</span></span><br><span class="line"><span class="keyword">set</span> smartcase                   <span class="comment">&quot; Enable smart-case search</span></span><br><span class="line"><span class="keyword">set</span> gdefault                    <span class="comment">&quot; Always substitute all matches in a line</span></span><br><span class="line"><span class="keyword">set</span> ignorecase                  <span class="comment">&quot; Always case-insensitive</span></span><br><span class="line"><span class="keyword">set</span> incsearch                   <span class="comment">&quot; Searches for strings incrementally</span></span><br><span class="line"><span class="keyword">set</span> autoindent                  <span class="comment">&quot; Auto-indent new lines</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span>                     <span class="comment">&quot;Use &#x27;C&#x27; style program indenting</span></span><br><span class="line"><span class="keyword">set</span> expandtab                   <span class="comment">&quot; Use spaces instead of tabs</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>                <span class="comment">&quot; Number of auto-indent spaces</span></span><br><span class="line"><span class="keyword">set</span> smartindent                 <span class="comment">&quot; Enable smart-indent</span></span><br><span class="line"><span class="keyword">set</span> smarttab                    <span class="comment">&quot; Enable smart-tabs</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span>               <span class="comment">&quot; Number of spaces per Tab</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> ruler                       <span class="comment">&quot; Show row and column ruler information</span></span><br><span class="line"><span class="keyword">set</span> undolevels=<span class="number">1000</span>             <span class="comment">&quot; Number of undo levels</span></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start  <span class="comment">&quot; Backspace behaviour</span></span><br><span class="line"><span class="keyword">set</span> lazyredraw                  <span class="comment">&quot; Don’t update screen during macro and script execution</span></span><br><span class="line"><span class="keyword">set</span> scrolloff=<span class="number">1</span>                 <span class="comment">&quot; The number of screen lines to keep above and below the cursor</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">display</span>+=lastline           <span class="comment">&quot; Always try to show a paragraph’s last line</span></span><br><span class="line"><span class="keyword">set</span> relativenumber              <span class="comment">&quot; Show line number on the current line and relative numbers on all other lines</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span>                     <span class="comment">&quot; Enable mouse for scrolling and resizing</span></span><br><span class="line"><span class="keyword">set</span> title                       <span class="comment">&quot; Set the window’s title, reflecting the file currently being edited</span></span><br><span class="line"><span class="keyword">set</span> autoread                    <span class="comment">&quot; Automatically re-read files if unmodified inside Vim</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">confirm</span>                     <span class="comment">&quot; Display a confirmation dialog when closing an unsaved file</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">1000</span>                <span class="comment">&quot; Increase the undo limit</span></span><br><span class="line"><span class="keyword">set</span> showcmd                     <span class="comment">&quot; 输入的命令显示出来，看的清楚些  </span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span>                <span class="comment">&quot; 启动显示状态行(1),总是显示状态行(2)  </span></span><br><span class="line"><span class="keyword">set</span> nocompatible                <span class="comment">&quot; 去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限  </span></span><br><span class="line"><span class="keyword">set</span> fencs=utf-<span class="number">8</span>,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="keyword">set</span> termencoding=utf-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> modifiable</span><br><span class="line"><span class="keyword">set</span> fileencodings=ucs-bom,utf-<span class="number">8</span>,cp936,latin1</span><br><span class="line"><span class="keyword">set</span> fileencoding=utf-<span class="number">8</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="keyword">set</span> binary</span><br><span class="line"><span class="keyword">set</span> noeol</span><br><span class="line"><span class="keyword">set</span> clipboard+=unnamed          <span class="comment">&quot; 共享剪贴板  </span></span><br><span class="line"><span class="keyword">set</span> magic                       <span class="comment">&quot; 设置魔术</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">confirm</span>                     <span class="comment">&quot; 在处理未保存或只读文件的时候，弹出确认</span></span><br><span class="line"><span class="keyword">set</span> completeopt=longest,<span class="keyword">menu</span>    <span class="comment">&quot; 打开文件类型检测, 加了这句才可以用智能补全</span></span><br><span class="line"><span class="keyword">set</span> noerrorbells visualbell t_vb=</span><br><span class="line"><span class="keyword">autocmd</span> GUIEnter * <span class="keyword">set</span> visualbell t_vb=</span><br><span class="line"><span class="keyword">set</span> t_RV=</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&quot;cscope&quot;</span>) &amp;&amp; <span class="built_in">filereadable</span>(<span class="string">&quot;/usr/bin/cscope&quot;</span>)</span><br><span class="line">   <span class="keyword">set</span> csprg=/usr/bin/<span class="keyword">cscope</span></span><br><span class="line">   <span class="keyword">set</span> csto=<span class="number">0</span></span><br><span class="line">   <span class="keyword">set</span> <span class="keyword">cst</span></span><br><span class="line">   <span class="keyword">set</span> nocsverb</span><br><span class="line">   <span class="comment">&quot; add any database in current directory</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">filereadable</span>(<span class="string">&quot;cscope.out&quot;</span>)</span><br><span class="line">      <span class="keyword">cs</span> <span class="built_in">add</span> $PWD/<span class="keyword">cscope</span>.out</span><br><span class="line">   <span class="comment">&quot; else add database pointed to by environment</span></span><br><span class="line">   <span class="keyword">elseif</span> $CSCOPE_DB != <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">cs</span> <span class="built_in">add</span> $CSCOPE_DB</span><br><span class="line">   <span class="keyword">endif</span></span><br><span class="line">   <span class="keyword">set</span> csverb</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;s :<span class="keyword">cs</span> <span class="keyword">find</span> s <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;g :<span class="keyword">cs</span> <span class="keyword">find</span> g <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;<span class="keyword">c</span> :<span class="keyword">cs</span> <span class="keyword">find</span> <span class="keyword">c</span> <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;t :<span class="keyword">cs</span> <span class="keyword">find</span> t <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;<span class="keyword">e</span> :<span class="keyword">cs</span> <span class="keyword">find</span> <span class="keyword">e</span> <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;<span class="keyword">f</span> :<span class="keyword">cs</span> <span class="keyword">find</span> <span class="keyword">f</span> <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;i :<span class="keyword">cs</span> <span class="keyword">find</span> i <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> &lt;C-\&gt;d :<span class="keyword">cs</span> <span class="keyword">find</span> d <span class="symbol">&lt;C-R&gt;</span>=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F12&gt;</span> gg=G</span><br><span class="line"><span class="comment">&quot;去空行  </span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;F2&gt;</span> :g/^\s*$/d<span class="symbol">&lt;CR&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;默认最大化窗口打开</span></span><br><span class="line"><span class="keyword">au</span> GUIEnter * <span class="keyword">simalt</span> ~<span class="keyword">x</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;新文件标题&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;新建.c,.h,.sh,.java文件，自动插入文件头 </span></span><br><span class="line"><span class="string">&quot; autocmd BufNewFile *.py,*.cpp,*.[ch],*.sh,*.java exec &quot;</span>:<span class="keyword">call</span> SetTitle()<span class="comment">&quot; </span></span><br><span class="line"><span class="keyword">autocmd</span> BufNewFile * exec <span class="string">&quot;:call SetTitle()&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span>定义函数SetTitle，自动插入文件头 </span><br><span class="line">func SetTitle() </span><br><span class="line">    <span class="comment">&quot;如果文件类型为.sh文件 </span></span><br><span class="line">    <span class="keyword">if</span> &amp;<span class="keyword">filetype</span> == <span class="string">&#x27;sh&#x27;</span> </span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>,<span class="string">&quot;\#########################################################################&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\# File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot;\# Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot;\#########################################################################&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;\#!/bin/bash&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">4</span>, <span class="string">&quot;&quot;</span>) </span><br><span class="line">    <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&#x27;python&#x27;</span>  </span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>,<span class="string">&quot;\#########################################################################&quot;</span>)   </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\#-*- coding:utf-8 -*-&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot;\#!/usr/bin/env python&quot;</span>)  </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>,   <span class="string">&quot;\# File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))   </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;\# Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>))   </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">4</span>, <span class="string">&quot;\#########################################################################&quot;</span>)  </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">5</span>, <span class="string">&quot;&quot;</span>) </span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>)== <span class="string">&#x27;h&#x27;</span></span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>, <span class="string">&quot;/*************************************************************************&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot; &gt; File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot; &gt; Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot; ************************************************************************/&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&#x27;cpp&#x27;</span></span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>, <span class="string">&quot;/*************************************************************************&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot; &gt; File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot; &gt; Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot; ************************************************************************/&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">4</span>, <span class="string">&quot;#include &lt;iostream&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">5</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> &amp;<span class="keyword">filetype</span> == <span class="string">&#x27;c&#x27;</span></span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>, <span class="string">&quot;/*************************************************************************&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot; &gt; File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot; &gt; Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot; ************************************************************************/&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">4</span>, <span class="string">&quot;#include &lt;stdio.h&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">5</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>)== <span class="string">&#x27;md&#x27;</span></span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>, <span class="string">&quot;```&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot;Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot;```&quot;</span>)</span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">call</span> <span class="built_in">setline</span>(<span class="number">1</span>, <span class="string">&quot;/*************************************************************************&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>), <span class="string">&quot; &gt; File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, <span class="string">&quot; &gt; Created Time: &quot;</span>.<span class="built_in">strftime</span>(<span class="string">&quot;%c&quot;</span>)) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">2</span>, <span class="string">&quot; ************************************************************************/&quot;</span>) </span><br><span class="line">        <span class="keyword">call</span> <span class="keyword">append</span>(<span class="built_in">line</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line">    <span class="comment">&quot;新建文件后，自动定位到文件末尾</span></span><br><span class="line">    <span class="keyword">autocmd</span> BufNewFile * <span class="keyword">normal</span> G</span><br><span class="line">endfunc </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;自动补全</span></span><br><span class="line">:<span class="keyword">inoremap</span> ( ()<span class="symbol">&lt;ESC&gt;</span>i</span><br><span class="line">:<span class="keyword">inoremap</span> ) <span class="symbol">&lt;c-r&gt;</span>=ClosePair(<span class="string">&#x27;)&#x27;</span>)<span class="symbol">&lt;CR&gt;</span></span><br><span class="line">:<span class="keyword">inoremap</span> &#123; &#123;<span class="symbol">&lt;CR&gt;</span>&#125;<span class="symbol">&lt;ESC&gt;</span>O</span><br><span class="line">:<span class="keyword">inoremap</span> &#125; <span class="symbol">&lt;c-r&gt;</span>=ClosePair(<span class="string">&#x27;&#125;&#x27;</span>)<span class="symbol">&lt;CR&gt;</span></span><br><span class="line">:<span class="keyword">inoremap</span> [ []<span class="symbol">&lt;ESC&gt;</span>i</span><br><span class="line">:<span class="keyword">inoremap</span> ] <span class="symbol">&lt;c-r&gt;</span>=ClosePair(<span class="string">&#x27;]&#x27;</span>)<span class="symbol">&lt;CR&gt;</span></span><br><span class="line">:<span class="keyword">inoremap</span> <span class="string">&quot; &quot;</span><span class="comment">&quot;&lt;ESC&gt;i</span></span><br><span class="line">:<span class="keyword">inoremap</span> <span class="string">&#x27; &#x27;</span><span class="string">&#x27;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">function! ClosePair(char)</span></span><br><span class="line"><span class="string">    if getline(&#x27;</span>.<span class="string">&#x27;)[col(&#x27;</span>.<span class="string">&#x27;) - 1] == a:char</span></span><br><span class="line"><span class="string">        return &quot;\&lt;Right&gt;&quot;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        return a:char</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string">filetype plugin indent on </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;highlight Functions</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead * :syntax match cfunctions &quot;\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;[^()]*)(&quot;me=e-2</span></span><br><span class="line"><span class="string">autocmd BufNewFile,BufRead * :syntax match cfunctions &quot;\&lt;[a-zA-Z_][a-zA-Z_0-9]*\&gt;\s*(&quot;me=e-1</span></span><br><span class="line"><span class="string">hi cFunctions gui=NONE cterm=bold  ctermfg=blue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hi PreCondit ctermfg=161 cterm=bold</span></span><br><span class="line"><span class="string">highlight LineNr ctermfg=darkblue</span></span><br><span class="line"><span class="string">hi MatchParen ctermbg=Yellow guibg=lightblue</span></span><br><span class="line"><span class="string">hi ModeMsg ctermfg=Green</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set cursorline</span></span><br><span class="line"><span class="string">hi CursorLine cterm=underline</span></span><br><span class="line"><span class="string">hi SpellBad gui=undercurl ctermbg=52</span></span><br><span class="line"><span class="string">hi SpellCap    guisp=#7070F0 gui=undercurl</span></span><br><span class="line"><span class="string">hi SpellLocal  guisp=#70F0F0 gui=undercurl</span></span><br><span class="line"><span class="string">hi SpellRare   guisp=#FFFFFF gui=undercurl</span></span><br><span class="line"><span class="string">hi SpellCap                ctermbg=17</span></span><br><span class="line"><span class="string">hi SpellLocal              ctermbg=17</span></span><br><span class="line"><span class="string">hi SpellRare  ctermfg=none ctermbg=none  cterm=reverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let vim_markdown_preview_github=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; Only do this part when compiled with support for autocommands</span></span><br><span class="line"><span class="string">if has(&quot;autocmd&quot;)</span></span><br><span class="line"><span class="string">  augroup redhat</span></span><br><span class="line"><span class="string">  autocmd!</span></span><br><span class="line"><span class="string">  &quot; In text files, always limit the width of text to 78 characters</span></span><br><span class="line"><span class="string">  &quot; autocmd BufRead *.txt set tw=78</span></span><br><span class="line"><span class="string">  &quot; When editing a file, always jump to the last cursor position</span></span><br><span class="line"><span class="string">  autocmd BufReadPost *</span></span><br><span class="line"><span class="string">  \ if line(&quot;&#x27;</span>\<span class="string">&quot;&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">line</span> (<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) |</span><br><span class="line">  \   <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> |</span><br><span class="line">  \ <span class="keyword">endif</span></span><br><span class="line">  <span class="comment">&quot; don&#x27;t write swapfile on most commonly used directories for NFS mounts or USB sticks</span></span><br><span class="line">  <span class="keyword">autocmd</span> BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* <span class="keyword">set</span> directory=~/tmp,/var/tmp,/tmp</span><br><span class="line">  <span class="comment">&quot; start with spec file template</span></span><br><span class="line">  <span class="keyword">autocmd</span> BufNewFile *.spec <span class="number">0</span>r /usr/share/<span class="keyword">vim</span>/vimfiles/template.spec</span><br><span class="line">  <span class="keyword">augroup</span> END</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> vimdiff</span><br><span class="line"><span class="keyword">if</span> &amp;diff</span><br><span class="line">    <span class="keyword">colorscheme</span> evening</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">&quot;Chinese Punctuation</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>! <span class="title">CheckChineseMark</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">&quot;依次检查</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;。&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/。/\.&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;，&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/，/,&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;；&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/；/;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  <span class="built_in">search</span>(<span class="string">&#x27;？&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/？/?&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;：&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/：/\:&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;‘&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/‘/\&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;’&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/’/\&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;”&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/”/\&quot;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;“&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/“/\&quot;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;《&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/《/\&lt;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;》&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/》/\&gt;&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;——&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/——/-&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;）&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/）/\)&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;（&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/（/\(&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;！&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/！/!&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;【&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/【/\[&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">search</span>(<span class="string">&#x27;】&#x27;</span>)</span><br><span class="line">        <span class="keyword">execute</span> <span class="string">&quot;%s/】/\]&quot;</span></span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-L&gt;</span> <span class="symbol">&lt;ESC&gt;</span>:<span class="keyword">call</span> CheckChineseMark()<span class="symbol">&lt;ESC&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
